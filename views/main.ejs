<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <main>
        <div class="grid-container">
            <!-- Solar Production Card -->
            <div class="card">
                <div class="card-content" style="--clr:#06ccff;--num:78">
                    <div class="circle-progress solar-production">
                        <svg>
                            <circle class="background" cx="70" cy="70" r="70"></circle>
                            <circle class="progress" cx="70" cy="70" r="70"></circle>
                        </svg>
                        <i class="fas fa-solar-panel icon" style="color: #06ccff;">Solar</i>
                        <div class="number">
                            <div class="value">0.0 W </div>
                        </div>
                    </div>
                    <!-- Assuming this component is defined elsewhere -->
                    <!-- <home-assistant-energy-usage-card period="daily" detail-period="monthly" data="<%= JSON.stringify(data.solarProductionData) %>"></home-assistant-energy-usage-card> -->
                </div>
            </div>
            <!-- Battery State of Charge Card -->
            <div class="card">
                <div class="card-content" style="--clr:#ff00be;--num:78">
                    <div class="circle-progress battery-state-of-charge">
                        <svg>
                            <circle class="background" cx="70" cy="70" r="70"></circle>
                            <circle class="progress" cx="70" cy="70" r="70"></circle>
                        </svg>
                        <i class="fas fa-battery-full icon" style="color: #ff00be;">Battery</i>
                        <div class="number">
                            <div class="value">0.0 %</div>
                        </div>
                    </div>
                    <!-- Assuming this component is defined elsewhere -->
                    <!-- <home-assistant-battery-storage-card data="<%= JSON.stringify(data.batteryStateOfChargeData) %>"></home-assistant-battery-storage-card> -->
                </div>
            </div>
           <!-- Grid Import Card -->
<div class="card">
    <div class="card-content" style="--clr:#fee800;;--num:78">
        <div class="circle-progress grid-import">
            <svg>
                <circle class="background" cx="70" cy="70" r="70"></circle>
                <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-bolt icon" style="color: #fee800;">Grid</i>
            <div class="number">
                <div class="value">0.0 W</div>
            </div>
        </div>
        <!-- Assuming this component is defined elsewhere -->
        <!-- <home-assistant-energy-usage-card period="daily" detail-period="monthly" data="<%= JSON.stringify(data.gridPowerData) %>"></home-assistant-energy-usage-card> -->
    </div>
</div>

<!-- Load Power Card -->
<div class="card">
    <div class="card-content" style="--clr: #00ffae;--num:78">
        <div class="circle-progress load-power">
            <svg>
                <circle class="background" cx="70" cy="70" r="70"></circle>
                <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-bolt icon" style="color: #00ffae;">Load</i>
            <div class="number">
                <div class="value">0.0 W</div>
            </div>
        </div>
        <!-- Assuming this component is defined elsewhere -->
        <!-- <home-assistant-energy-usage-card period="daily" detail-period="monthly" data="<%= JSON.stringify(data.loadPowerData) %>"></home-assistant-energy-usage-card> -->
    </div>
</div>

<!-- Grid Voltage Card -->
<div class="card">
    <div class="card-content" style="--clr:#ffa500;--num:78">
        <div class="circle-progress grid-voltage">
            <svg>
                <circle class="background" cx="70" cy="70" r="70"></circle>
                <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-bolt icon" style="color: #ffa500;">Grid V</i>
            <div class="number">
                <div class="value">0.0 V</div>
            </div>
        </div>
    </div>
</div>

<!-- Solar PV Totals -->
<div class="cards">
    <div class="card-contents">
        <h2>Solar PV Totals</h2>
        <div class="row mb-3">
          <div class="col-4"style="margin-left: 25px; margin-right: 25px;">
            <h3>Daily</h3>
            <div class="value">0 kWh</div>
        </div>
        <div class="col-4" style="margin-left: 25px; margin-right: 25px;">
            <h3>Weekly</h3>
            <div class="value"> 0 kWh</div>
        </div>
        <div class="col-4"style="margin-left: 25px; margin-right: 25px;">
            <h3>Monthly</h3>
            <div class="value"> 0  kWh</div>
        </div>
        </div>
    </div>
</div>

        </div>
    </main>

    <script>
        async function fetchDataFromInfluxDB() {
            const influxDBEndpoint = 'http://192.168.160.55:8086/query?db=homeassistant&u=admin&p=adminadmin';
      
            const queries = [
                `SELECT last("value") AS "solarProduction" FROM "state" WHERE "topic" = 'solar_assistant_DEYE/total/pv_power/state'`,
                `SELECT last("value") AS "batteryStateOfCharge" FROM "state" WHERE "topic" = 'solar_assistant_DEYE/total/battery_state_of_charge/state'`,
                `SELECT last("value") AS "gridPower" FROM "state" WHERE "topic" = 'solar_assistant_DEYE/total/grid_power/state'`,
                `SELECT last("value") AS "loadPower" FROM "state" WHERE "topic" = 'solar_assistant_DEYE/total/load_power/state'`,
                `SELECT last("value") AS "gridVoltage" FROM "state" WHERE "topic" = 'solar_assistant_DEYE/total/grid_voltage/state'`
            ];
      
            try {
                const responses = await Promise.all(queries.map(async query => {
                    const response = await fetch(influxDBEndpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: `q=${encodeURIComponent(query)}`
                    });
                    return await response.json();
                }));
      
                const data = responses.map(response => response.results[0].series[0].values[0][1]);
      
                return {
                    solarProduction: data[0],
                    batteryStateOfCharge: data[1],
                    gridPower: data[2],
                    loadPower: data[3],
                    gridVoltage: data[4]
                };
            } catch (error) {
                console.error('Error fetching data from InfluxDB:', error);
                throw error;
            }
        }
      
        function updateRealTimeData() {
            fetchDataFromInfluxDB()
                .then(data => {
                    updateCircleProgress('.solar-production', { value: data.solarProduction }, '#06ccff');
                    updateCircleProgress('.battery-state-of-charge', { value: data.batteryStateOfCharge }, '#ff00be');
                    updateCircleProgress('.grid-import', { value: data.gridPower }, '#fee800');
                    updateCircleProgress('.load-power', { value: data.loadPower }, '#00ffae');
                    updateCircleProgress('.grid-voltage', { value: data.gridVoltage }, '#ffa500');
                })
                .catch(error => console.error('Error updating real-time data:', error));
        }
      
        function updateCircleProgress(selector, data, color) {
            const progressElement = document.querySelector(`${selector} .progress`);
            const valueElement = document.querySelector(`${selector} .value`);
            const iconElement = document.querySelector(`${selector} .icon`);
      
            let valueText = `${data.value.toFixed(2)} ${selector === '.grid-voltage' ? 'V' : 'W'}`;
            if (selector === '.battery-state-of-charge') {
                valueText = `${data.value.toFixed(2)} %`;
            }
      
            // Update the progress bar width and value
            progressElement.style.strokeDashoffset = 565.48 - (565.48 * (data.value / 1000));
            progressElement.style.stroke = color;
            iconElement.style.color = color;
            valueElement.textContent = valueText;
        }
      
        // Update the real-time data every 5 seconds
        setInterval(updateRealTimeData, 5000);
      </script>
      
</body>
</html>